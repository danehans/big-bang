{{- if .Values.addons.minio.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.addons.minio "name" "minio" "defaults" (include "bigbang.defaults.minio" .)) }}
{{- end }}

{{- define "bigbang.defaults.minio" -}}
{{ $istioEnabled := false }}
{{- if .Values.istio.enabled }}{{ $istioEnabled = true }}{{- else }}
{{- range $values := .Values.istios }}
{{ if and ($values.enabled) (eq $istioEnabled false) }}{{ $istioEnabled = true }}{{- end }}
{{- end }}
{{- end }}
hostname: {{ .Values.hostname }}

istio:
  enabled: {{ .Values.istio.enabled }}
  virtualService:  # this key is non-standard and needs to be fixed in the package
    gateways:
    - istio-system/{{ default "public" .Values.addons.minio.ingress.gateway }}

minioRootCreds: minio-root-creds-secret

monitoring:
  enabled: {{ .Values.monitoring.enabled }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- if .Values.istio.enabled }}
    {{- $gateway := default "public" .Values.addons.minio.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.istio) | nindent 4 }}
    {{- end }}
    {{- range $name, $values := .Values.istios }}
    {{- $gateway := default "public" $.Values.addons.minio.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil $values) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default $values) | nindent 4 }}
    {{- end -}}

podAnnotations:
  sidecar.istio.io/inject: "true"
  traffic.sidecar.istio.io/includeInboundPorts: "*"
  traffic.sidecar.istio.io/excludeInboundPorts: "9443"

tenants:
  imagePullSecret:
    name: private-registry
  secrets:
    accessKey: {{ .Values.addons.minio.accesskey | default "minio" }}
    secretKey: {{ .Values.addons.minio.secretkey | default "minio123" }}


{{- end -}}
