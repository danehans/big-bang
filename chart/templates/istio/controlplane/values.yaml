{{/*
Ensure both deprecated and default control planes are not enabled.
*/}}
{{- if and (.Values.istio.enabled) (.Values.istio.controlplanes.default.enabled) }}
{{- fail "Only one of '.Values.istio' or `.Values.istio.controlplanes.default` may be enabled." }}
{{- end }}
{{/*
Ensure controlplane and operator revisions match.
*/}}
{{- $controlplanes := dict "deprecated" .Values.istio }}
{{- range $name, $values := .Values.istio.controlplanes }}{{- $_ := set $controlplanes $name $values }}{{- end }}
{{- $operators := dict "deprecated" .Values.istiooperator }}
{{- range $name, $values := .Values.istio.operators }}{{- $_ := set $operators $name $values }}{{- end }}
{{- range $name, $values := $controlplanes }}
{{/*
Create the values secret for enabled control planes.
*/}}
{{- if $values.enabled }}
---
{{- if or (eq $name "default") (eq $name "deprecated") }}{{- $name = "istio" }}{{- else }}{{- $name = printf "istio-%s" $name }}{{- end }}
{{- $defaults := include "bigbang.defaults.istio" (dict "root" $ "package" $values) }}
{{- include "values-secret" (dict "root" $ "package" $values "name" $name "defaults" $defaults) }}
{{- end }}
{{- end }}

{{- define "bigbang.defaults.istio" -}}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .root.Values.domain .root.Values.hostname }}
domain: {{ $domainName }}
{{ if hasKey .package "revision" }}
revision: {{ .package.revision }}
{{ end }}
tracing:
  enabled:  {{ .root.Values.jaeger.enabled }}

imagePullSecrets:
  - private-registry

openshift: {{ .root.Values.openshift }}

authservice:
  enabled: {{ .root.Values.addons.authservice.enabled }}

monitoring:
  enabled: {{ .root.Values.monitoring.enabled }}

networkPolicies:
  enabled: {{ .root.Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .root.Values.networkPolicies.controlPlaneCidr }}

{{- if .package.ingressGateways }}
ingressGateways:
  istio-ingressgateway:
    enabled: false
{{- end }}

{{- range $name, $values := .package.ingressGateways }}
  {{ $name | nindent 2 }}:
    {{- toYaml (merge (dict "k8s" $values.kubernetesResourceSpec) (fromYaml (include "istio.ingressgateway.k8s" $values))) | nindent 4 }}
{{- end }}
{{- end }}

{{- define "istio.ingressgateway.k8s" -}}
k8s:
  service:
    type: {{ .type }}
    {{- if .nodePortBase }}
    ports: # Pulled from Istio gateway defaults (https://github.com/istio/istio/blob/master/manifests/charts/gateways/istio-ingress/values.yaml)
    # Ports default to "protocol: TCP" and "targetPort = port"
    # AWS ELB will by default perform health checks on the first port on this list. https://github.com/istio/istio/issues/12503
    - port: 15021
      name: status-port
      nodePort: {{ add .nodePortBase 0 }}
    - port: 80
      targetPort: 8080
      name: http2
      nodePort: {{ add .nodePortBase 1 }}
    - port: 443
      targetPort: 8443
      name: https
      nodePort: {{ add .nodePortBase 2 }}
    # SNI Routing port
    - port: 15443
      name: tls
      nodePort: {{ add .nodePortBase 3 }}
    {{- end }}
{{- end }}

