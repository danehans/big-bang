{{- if .Values.kiali.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.kiali "name" "kiali" "defaults" (include "bigbang.defaults.kiali" .)) }}
{{- end }}

{{- define "bigbang.defaults.kiali" -}}
{{ $istioEnabled := false }}
{{- if .Values.istio.enabled }}{{ $istioEnabled = true }}{{- else }}
{{- range $values := .Values.istios }}
{{ if and ($values.enabled) (eq $istioEnabled false) }}{{ $istioEnabled = true }}{{- end }}
{{- end }}
{{- end }}
hostname: {{ .Values.hostname }}

openshift: {{ .Values.openshift}}

istio:
  enabled: {{ $istioEnabled }}
  kiali:
    gateways:
    - istio-system/{{ default "public" .Values.kiali.ingress.gateway }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}
elasticsearch:
  enabled: {{ .Values.logging.enabled }}
cr:
  spec:
    server:
      web_port: "443"
    auth:
      {{- if .Values.kiali.sso.enabled }}
      strategy: openid
      openid:
        client_id: "{{ .Values.kiali.sso.client_id }}"
        disable_rbac: true
        issuer_uri: "https://{{ .Values.sso.oidc.host }}/auth/realms/{{ .Values.sso.oidc.realm }}"
        scopes:
        - openid
        - email
        username_claim: email
      {{- else }}
      strategy: token
      {{- end }}
    external_services:
      grafana:
        enabled: {{ dig "grafana" "enabled" true .Values.monitoring.values }}
        {{- $grafanaUrl := first (dig "istio" "grafana" "hosts" list .Values.monitoring.values) }}
        url: https://{{ tpl ($grafanaUrl | default (printf "%s.%s" "grafana" .Values.hostname)) . }}
        {{- if (dig "grafana" "enabled" true .Values.monitoring.values) }}
        auth:
          {{- if (dig "grafana" "admin" "existingSecret" "" .Values.monitoring.values) }}
          {{- $userKey := (dig "grafana" "admin" "userKey" "admin-user" .Values.monitoring.values) }}
          {{- with lookup "v1" "Secret" "monitoring" .Values.monitoring.values.grafana.admin.existingSecret }}
          username: {{ (get .data $userKey | b64dec) | default "admin" }}
          {{- end }}
          {{- else }}
          username: {{ dig "grafana" "adminUser" "admin" .Values.monitoring.values }}
          {{- end }}
          password: "secret:grafana-auth:password"
        {{- end }}
      tracing:
        enabled: {{ .Values.jaeger.enabled }}
        {{- $tracingUrl := first (dig "istio" "jaeger" "hosts" list .Values.jaeger.values) }}
        url: https://{{ tpl ($tracingUrl | default (printf "%s.%s" "tracing" .Values.hostname)) . }}
      istio:
        component_status:
          components:
            - app_label: istiod
              is_core: true
              is_proxy: false
            {{- range $istioName, $istioValues := .Values.istios }}
            {{- if $istioValues.enabled }}
            {{- range $name, $values := $istioValues.ingressGateways }}
            - app_label: {{ $name }}
              is_core: true
              is_proxy: true
            {{- end }}
            {{- range $name, $values := $istioValues.values.ingressGateways }}
            - app_label: {{ $name }}
              is_core: true
              is_proxy: true
            {{- end }}
            {{- end }}
            {{- end }}
    api:
      namespaces:
        # bigbang watches all!
        exclude: []
networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- if .Values.istio.enabled }}
    {{- $gateway := default "public" .Values.kiali.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.istio) | nindent 4 }}
    {{- end }}
    {{- range $name, $values := .Values.istios }}
    {{- $gateway := default "public" $.Values.kiali.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil $values) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default $values) | nindent 4 }}
    {{- end -}}
{{- end -}}
